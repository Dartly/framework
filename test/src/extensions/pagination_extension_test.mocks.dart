// Mocks generated by Mockito 5.4.4 from annotations
// in vania/test/src/extensions/pagination_extension_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:eloquent/src/connection_interface.dart' as _i2;
import 'package:eloquent/src/query/expression.dart' as _i6;
import 'package:eloquent/src/query/grammars/query_grammar.dart' as _i3;
import 'package:eloquent/src/query/join_clause.dart' as _i7;
import 'package:eloquent/src/query/processors/processor.dart' as _i4;
import 'package:eloquent/src/query/query_builder.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectionInterface_0 extends _i1.SmartFake
    implements _i2.ConnectionInterface {
  _FakeConnectionInterface_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryGrammar_1 extends _i1.SmartFake implements _i3.QueryGrammar {
  _FakeQueryGrammar_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProcessor_2 extends _i1.SmartFake implements _i4.Processor {
  _FakeProcessor_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryBuilder_3 extends _i1.SmartFake implements _i5.QueryBuilder {
  _FakeQueryBuilder_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryExpression_4 extends _i1.SmartFake
    implements _i6.QueryExpression {
  _FakeQueryExpression_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [QueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryBuilder extends _i1.Mock implements _i5.QueryBuilder {
  MockQueryBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConnectionInterface get connection => (super.noSuchMethod(
        Invocation.getter(#connection),
        returnValue: _FakeConnectionInterface_0(
          this,
          Invocation.getter(#connection),
        ),
      ) as _i2.ConnectionInterface);

  @override
  set connection(_i2.ConnectionInterface? _connection) => super.noSuchMethod(
        Invocation.setter(
          #connection,
          _connection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.QueryGrammar get grammar => (super.noSuchMethod(
        Invocation.getter(#grammar),
        returnValue: _FakeQueryGrammar_1(
          this,
          Invocation.getter(#grammar),
        ),
      ) as _i3.QueryGrammar);

  @override
  set grammar(_i3.QueryGrammar? _grammar) => super.noSuchMethod(
        Invocation.setter(
          #grammar,
          _grammar,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Processor get processor => (super.noSuchMethod(
        Invocation.getter(#processor),
        returnValue: _FakeProcessor_2(
          this,
          Invocation.getter(#processor),
        ),
      ) as _i4.Processor);

  @override
  set processor(_i4.Processor? _processor) => super.noSuchMethod(
        Invocation.setter(
          #processor,
          _processor,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> get bindings => (super.noSuchMethod(
        Invocation.getter(#bindings),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  set bindings(Map<String, dynamic>? _bindings) => super.noSuchMethod(
        Invocation.setter(
          #bindings,
          _bindings,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set aggregateProp(Map<String, dynamic>? _aggregateProp) => super.noSuchMethod(
        Invocation.setter(
          #aggregateProp,
          _aggregateProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set columnsProp(List<dynamic>? _columnsProp) => super.noSuchMethod(
        Invocation.setter(
          #columnsProp,
          _columnsProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get distinctProp => (super.noSuchMethod(
        Invocation.getter(#distinctProp),
        returnValue: false,
      ) as bool);

  @override
  set distinctProp(bool? _distinctProp) => super.noSuchMethod(
        Invocation.setter(
          #distinctProp,
          _distinctProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set fromProp(dynamic _fromProp) => super.noSuchMethod(
        Invocation.setter(
          #fromProp,
          _fromProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i7.JoinClause> get joinsProp => (super.noSuchMethod(
        Invocation.getter(#joinsProp),
        returnValue: <_i7.JoinClause>[],
      ) as List<_i7.JoinClause>);

  @override
  set joinsProp(List<_i7.JoinClause>? _joinsProp) => super.noSuchMethod(
        Invocation.setter(
          #joinsProp,
          _joinsProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Map<String, dynamic>> get wheresProp => (super.noSuchMethod(
        Invocation.getter(#wheresProp),
        returnValue: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  set wheresProp(List<Map<String, dynamic>>? _wheresProp) => super.noSuchMethod(
        Invocation.setter(
          #wheresProp,
          _wheresProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<dynamic> get groupsProp => (super.noSuchMethod(
        Invocation.getter(#groupsProp),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  set groupsProp(List<dynamic>? _groupsProp) => super.noSuchMethod(
        Invocation.setter(
          #groupsProp,
          _groupsProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Map<String, dynamic>> get havingsProp => (super.noSuchMethod(
        Invocation.getter(#havingsProp),
        returnValue: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  set havingsProp(List<Map<String, dynamic>>? _havingsProp) =>
      super.noSuchMethod(
        Invocation.setter(
          #havingsProp,
          _havingsProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Map<String, dynamic>> get ordersProp => (super.noSuchMethod(
        Invocation.getter(#ordersProp),
        returnValue: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  set ordersProp(List<Map<String, dynamic>>? _ordersProp) => super.noSuchMethod(
        Invocation.setter(
          #ordersProp,
          _ordersProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set limitProp(int? _limitProp) => super.noSuchMethod(
        Invocation.setter(
          #limitProp,
          _limitProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set offsetProp(int? _offsetProp) => super.noSuchMethod(
        Invocation.setter(
          #offsetProp,
          _offsetProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Map<String, dynamic>> get unionsProp => (super.noSuchMethod(
        Invocation.getter(#unionsProp),
        returnValue: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  set unionsProp(List<Map<String, dynamic>>? _unionsProp) => super.noSuchMethod(
        Invocation.setter(
          #unionsProp,
          _unionsProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set unionLimit(int? _unionLimit) => super.noSuchMethod(
        Invocation.setter(
          #unionLimit,
          _unionLimit,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set unionOffset(int? _unionOffset) => super.noSuchMethod(
        Invocation.setter(
          #unionOffset,
          _unionOffset,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Map<String, dynamic>> get unionOrdersProp => (super.noSuchMethod(
        Invocation.getter(#unionOrdersProp),
        returnValue: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  set unionOrdersProp(List<Map<String, dynamic>>? _unionOrdersProp) =>
      super.noSuchMethod(
        Invocation.setter(
          #unionOrdersProp,
          _unionOrdersProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set lockProp(dynamic _lockProp) => super.noSuchMethod(
        Invocation.setter(
          #lockProp,
          _lockProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<dynamic> get backups => (super.noSuchMethod(
        Invocation.getter(#backups),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  set backups(List<dynamic>? _backups) => super.noSuchMethod(
        Invocation.setter(
          #backups,
          _backups,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<dynamic> get bindingBackups => (super.noSuchMethod(
        Invocation.getter(#bindingBackups),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  set bindingBackups(List<dynamic>? _bindingBackups) => super.noSuchMethod(
        Invocation.setter(
          #bindingBackups,
          _bindingBackups,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get useWritePdoProp => (super.noSuchMethod(
        Invocation.getter(#useWritePdoProp),
        returnValue: false,
      ) as bool);

  @override
  set useWritePdoProp(bool? _useWritePdoProp) => super.noSuchMethod(
        Invocation.setter(
          #useWritePdoProp,
          _useWritePdoProp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic getProperty(String? propertyName) =>
      super.noSuchMethod(Invocation.method(
        #getProperty,
        [propertyName],
      ));

  @override
  void setColumns(List<dynamic>? cols) => super.noSuchMethod(
        Invocation.method(
          #setColumns,
          [cols],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.QueryBuilder select([List<String>? columnsP = const [r'*']]) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [columnsP],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #select,
            [columnsP],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder selectSub(
    dynamic query,
    String? alias,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectSub,
          [
            query,
            alias,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #selectSub,
            [
              query,
              alias,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder selectRaw(
    String? expression, [
    List<dynamic>? bindingsP = const [],
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectRaw,
          [
            expression,
            bindingsP,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #selectRaw,
            [
              expression,
              bindingsP,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder fromRaw(
    String? expression, [
    List<dynamic>? $bindings = const [],
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #fromRaw,
          [
            expression,
            $bindings,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #fromRaw,
            [
              expression,
              $bindings,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  List<dynamic> createSub(dynamic query) => (super.noSuchMethod(
        Invocation.method(
          #createSub,
          [query],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  List<dynamic> parseSub(dynamic query) => (super.noSuchMethod(
        Invocation.method(
          #parseSub,
          [query],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  _i5.QueryBuilder addSelect(dynamic columnP) => (super.noSuchMethod(
        Invocation.method(
          #addSelect,
          [columnP],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #addSelect,
            [columnP],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder distinct() => (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #distinct,
            [],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder from(String? tableP) => (super.noSuchMethod(
        Invocation.method(
          #from,
          [tableP],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #from,
            [tableP],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder join(
    dynamic table,
    dynamic one, [
    String? operator,
    dynamic two = null,
    String? type = r'inner',
    bool? where = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #join,
          [
            table,
            one,
            operator,
            two,
            type,
            where,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #join,
            [
              table,
              one,
              operator,
              two,
              type,
              where,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder joinWhere(
    String? table,
    dynamic one,
    dynamic operator,
    dynamic two, [
    dynamic type = r'inner',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinWhere,
          [
            table,
            one,
            operator,
            two,
            type,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #joinWhere,
            [
              table,
              one,
              operator,
              two,
              type,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder joinSub(
    dynamic query,
    dynamic alias,
    dynamic first, [
    String? operator,
    dynamic second,
    dynamic type = r'inner',
    dynamic where = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinSub,
          [
            query,
            alias,
            first,
            operator,
            second,
            type,
            where,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #joinSub,
            [
              query,
              alias,
              first,
              operator,
              second,
              type,
              where,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder leftJoin(
    String? table,
    dynamic first, [
    String? operator,
    dynamic second,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #leftJoin,
          [
            table,
            first,
            operator,
            second,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #leftJoin,
            [
              table,
              first,
              operator,
              second,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder leftJoinWhere(
    String? table,
    dynamic one,
    String? operator,
    dynamic two,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #leftJoinWhere,
          [
            table,
            one,
            operator,
            two,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #leftJoinWhere,
            [
              table,
              one,
              operator,
              two,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder rightJoin(
    String? table,
    dynamic first,
    String? operator, [
    dynamic second,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rightJoin,
          [
            table,
            first,
            operator,
            second,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #rightJoin,
            [
              table,
              first,
              operator,
              second,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder rightJoinWhere(
    String? table,
    dynamic one,
    String? operator,
    dynamic two,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rightJoinWhere,
          [
            table,
            one,
            operator,
            two,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #rightJoinWhere,
            [
              table,
              one,
              operator,
              two,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder where(
    dynamic column, [
    String? operator,
    dynamic value,
    String? boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [
            column,
            operator,
            value,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #where,
            [
              column,
              operator,
              value,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orWhere(
    dynamic column, [
    String? operator,
    dynamic value,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #orWhere,
          [
            column,
            operator,
            value,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orWhere,
            [
              column,
              operator,
              value,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  bool invalidOperatorAndValue(
    String? operator,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #invalidOperatorAndValue,
          [
            operator,
            value,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i5.QueryBuilder whereRaw(
    String? sql, [
    List<dynamic>? bindings = const [],
    dynamic boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereRaw,
          [
            sql,
            bindings,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereRaw,
            [
              sql,
              bindings,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orWhereRaw(
    String? sql, [
    List<dynamic>? bindings = const [],
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #orWhereRaw,
          [
            sql,
            bindings,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orWhereRaw,
            [
              sql,
              bindings,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereBetween(
    String? column, [
    List<dynamic>? values,
    String? boolean = r'and',
    bool? not = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereBetween,
          [
            column,
            values,
            boolean,
            not,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereBetween,
            [
              column,
              values,
              boolean,
              not,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orWhereBetween(
    String? column,
    List<dynamic>? values,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #orWhereBetween,
          [
            column,
            values,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orWhereBetween,
            [
              column,
              values,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereNotBetween(
    dynamic column,
    List<dynamic>? values, [
    dynamic boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereNotBetween,
          [
            column,
            values,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereNotBetween,
            [
              column,
              values,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orWhereNotBetween(
    String? column,
    List<dynamic>? values,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #orWhereNotBetween,
          [
            column,
            values,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orWhereNotBetween,
            [
              column,
              values,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereNested(
    Function? callback, [
    String? boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereNested,
          [
            callback,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereNested,
            [
              callback,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder forNestedWhere() => (super.noSuchMethod(
        Invocation.method(
          #forNestedWhere,
          [],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #forNestedWhere,
            [],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder addNestedWhereQuery(
    _i5.QueryBuilder? query, [
    dynamic boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNestedWhereQuery,
          [
            query,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #addNestedWhereQuery,
            [
              query,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereSub(
    String? column,
    String? operator,
    Function? callback,
    String? boolean,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereSub,
          [
            column,
            operator,
            callback,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereSub,
            [
              column,
              operator,
              callback,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereExists(
    Function? callback, [
    String? boolean = r'and',
    dynamic not = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereExists,
          [
            callback,
            boolean,
            not,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereExists,
            [
              callback,
              boolean,
              not,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orWhereExists(
    Function? callback, [
    bool? not = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #orWhereExists,
          [
            callback,
            not,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orWhereExists,
            [
              callback,
              not,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereNotExists(
    Function? callback, [
    String? boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereNotExists,
          [
            callback,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereNotExists,
            [
              callback,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orWhereNotExists(Function? callback) => (super.noSuchMethod(
        Invocation.method(
          #orWhereNotExists,
          [callback],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orWhereNotExists,
            [callback],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereIn(
    String? column,
    dynamic values, [
    String? boolean = r'and',
    bool? not = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereIn,
          [
            column,
            values,
            boolean,
            not,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereIn,
            [
              column,
              values,
              boolean,
              not,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orWhereIn(
    String? column,
    dynamic values,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #orWhereIn,
          [
            column,
            values,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orWhereIn,
            [
              column,
              values,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereNotIn(
    String? column,
    dynamic values, [
    dynamic boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereNotIn,
          [
            column,
            values,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereNotIn,
            [
              column,
              values,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orWhereNotIn(
    dynamic $column,
    dynamic $values,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #orWhereNotIn,
          [
            $column,
            $values,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orWhereNotIn,
            [
              $column,
              $values,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereInSub(
    String? column,
    Function? callback,
    String? boolean,
    bool? not,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereInSub,
          [
            column,
            callback,
            boolean,
            not,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereInSub,
            [
              column,
              callback,
              boolean,
              not,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereInExistingQuery(
    String? column,
    _i5.QueryBuilder? query,
    String? boolean,
    bool? not,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereInExistingQuery,
          [
            column,
            query,
            boolean,
            not,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereInExistingQuery,
            [
              column,
              query,
              boolean,
              not,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereNull(
    String? column, [
    String? boolean = r'and',
    bool? not = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereNull,
          [
            column,
            boolean,
            not,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereNull,
            [
              column,
              boolean,
              not,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orWhereNull(String? column) => (super.noSuchMethod(
        Invocation.method(
          #orWhereNull,
          [column],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orWhereNull,
            [column],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereNotNull(
    String? column, [
    String? boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereNotNull,
          [
            column,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereNotNull,
            [
              column,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orWhereNotNull(String? column) => (super.noSuchMethod(
        Invocation.method(
          #orWhereNotNull,
          [column],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orWhereNotNull,
            [column],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereDate(
    String? column,
    String? operator,
    int? value, [
    String? boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereDate,
          [
            column,
            operator,
            value,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereDate,
            [
              column,
              operator,
              value,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereDay(
    String? column,
    String? operator,
    int? value, [
    String? boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereDay,
          [
            column,
            operator,
            value,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereDay,
            [
              column,
              operator,
              value,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereMonth(
    String? column,
    String? operator,
    int? value, [
    String? boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereMonth,
          [
            column,
            operator,
            value,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereMonth,
            [
              column,
              operator,
              value,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder whereYear(
    String? column,
    String? operator,
    int? value, [
    String? boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereYear,
          [
            column,
            operator,
            value,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #whereYear,
            [
              column,
              operator,
              value,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder addDateBasedWhere(
    String? type,
    String? column,
    String? operator,
    int? value, [
    String? boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDateBasedWhere,
          [
            type,
            column,
            operator,
            value,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #addDateBasedWhere,
            [
              type,
              column,
              operator,
              value,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder groupBy(dynamic column) => (super.noSuchMethod(
        Invocation.method(
          #groupBy,
          [column],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #groupBy,
            [column],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder having(
    String? column, [
    String? operator,
    dynamic value,
    String? boolean = r'and',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #having,
          [
            column,
            operator,
            value,
            boolean,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #having,
            [
              column,
              operator,
              value,
              boolean,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orHaving(
    String? column, [
    String? operator,
    dynamic value,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #orHaving,
          [
            column,
            operator,
            value,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orHaving,
            [
              column,
              operator,
              value,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orderBy(
    String? column, [
    String? direction = r'asc',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [
            column,
            direction,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orderBy,
            [
              column,
              direction,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder latest([String? column = r'created_at']) =>
      (super.noSuchMethod(
        Invocation.method(
          #latest,
          [column],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #latest,
            [column],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder oldest([String? column = r'created_at']) =>
      (super.noSuchMethod(
        Invocation.method(
          #oldest,
          [column],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #oldest,
            [column],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder orderByRaw(
    String? sql, [
    dynamic bindings = const [],
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderByRaw,
          [
            sql,
            bindings,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #orderByRaw,
            [
              sql,
              bindings,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder offset(int? value) => (super.noSuchMethod(
        Invocation.method(
          #offset,
          [value],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #offset,
            [value],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder skip(int? value) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [value],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #skip,
            [value],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder limit(int? value) => (super.noSuchMethod(
        Invocation.method(
          #limit,
          [value],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #limit,
            [value],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder take(int? value) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [value],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #take,
            [value],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder forPage(
    int? page, [
    int? perPage = 15,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #forPage,
          [
            page,
            perPage,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #forPage,
            [
              page,
              perPage,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder union(
    dynamic queryP, [
    bool? all = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #union,
          [
            queryP,
            all,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #union,
            [
              queryP,
              all,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder lock([dynamic value = true]) => (super.noSuchMethod(
        Invocation.method(
          #lock,
          [value],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #lock,
            [value],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder lockForUpdate() => (super.noSuchMethod(
        Invocation.method(
          #lockForUpdate,
          [],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #lockForUpdate,
            [],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder sharedLock() => (super.noSuchMethod(
        Invocation.method(
          #sharedLock,
          [],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #sharedLock,
            [],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  String toSql() => (super.noSuchMethod(
        Invocation.method(
          #toSql,
          [],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #toSql,
            [],
          ),
        ),
      ) as String);

  @override
  dynamic find(
    int? id, [
    List<String>? columns = const [r'*'],
  ]) =>
      super.noSuchMethod(Invocation.method(
        #find,
        [
          id,
          columns,
        ],
      ));

  @override
  _i9.Future<dynamic> value(String? column) => (super.noSuchMethod(
        Invocation.method(
          #value,
          [column],
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<Map<String, dynamic>?> first([
    List<String>? columns = const [r'*'],
    int? timeoutInSeconds,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #first,
          [
            columns,
            timeoutInSeconds,
          ],
        ),
        returnValue: _i9.Future<Map<String, dynamic>?>.value(),
      ) as _i9.Future<Map<String, dynamic>?>);

  @override
  _i9.Future<List<Map<String, dynamic>>> get([
    List<String>? columnsP = const [r'*'],
    int? timeoutInSeconds,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            columnsP,
            timeoutInSeconds,
          ],
        ),
        returnValue: _i9.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i9.Future<List<Map<String, dynamic>>>);

  @override
  _i9.Future<List<Map<String, dynamic>>> runSelect([int? timeoutInSeconds]) =>
      (super.noSuchMethod(
        Invocation.method(
          #runSelect,
          [timeoutInSeconds],
        ),
        returnValue: _i9.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i9.Future<List<Map<String, dynamic>>>);

  @override
  dynamic pluck(
    String? column, [
    String? key,
  ]) =>
      super.noSuchMethod(Invocation.method(
        #pluck,
        [
          column,
          key,
        ],
      ));

  @override
  _i9.Future<int> count([dynamic columns = r'*']) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [columns],
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<dynamic> aggregate(
    String? function, [
    List<String>? columnsP = const [r'*'],
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregate,
          [
            function,
            columnsP,
          ],
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> insert(
    Map<String, dynamic>? values, [
    Duration? timeout,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            values,
            timeout,
          ],
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> insertGetId(
    Map<String, dynamic>? keyValues, [
    String? sequence = r'id',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertGetId,
          [
            keyValues,
            sequence,
          ],
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> update(
    Map<String, dynamic>? keyValues, [
    Duration? timeout = const Duration(seconds: 300),
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            keyValues,
            timeout,
          ],
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<int> delete([
    dynamic id,
    Duration? timeout = const Duration(seconds: 300),
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            id,
            timeout,
          ],
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  void truncate() => super.noSuchMethod(
        Invocation.method(
          #truncate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.QueryBuilder newQuery() => (super.noSuchMethod(
        Invocation.method(
          #newQuery,
          [],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #newQuery,
            [],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder forSubQuery() => (super.noSuchMethod(
        Invocation.method(
          #forSubQuery,
          [],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #forSubQuery,
            [],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  dynamic mergeWheres(
    List<Map<String, dynamic>>? wheresP,
    dynamic bindingsP,
  ) =>
      super.noSuchMethod(Invocation.method(
        #mergeWheres,
        [
          wheresP,
          bindingsP,
        ],
      ));

  @override
  List<dynamic> cleanBindings(List<dynamic>? bindings) => (super.noSuchMethod(
        Invocation.method(
          #cleanBindings,
          [bindings],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  _i6.QueryExpression raw(dynamic value) => (super.noSuchMethod(
        Invocation.method(
          #raw,
          [value],
        ),
        returnValue: _FakeQueryExpression_4(
          this,
          Invocation.method(
            #raw,
            [value],
          ),
        ),
      ) as _i6.QueryExpression);

  @override
  List<dynamic> getBindings() => (super.noSuchMethod(
        Invocation.method(
          #getBindings,
          [],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  _i5.QueryBuilder addBinding(
    dynamic value, [
    String? type = r'where',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBinding,
          [
            value,
            type,
          ],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #addBinding,
            [
              value,
              type,
            ],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i5.QueryBuilder mergeBindings(_i5.QueryBuilder? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #mergeBindings,
          [query],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #mergeBindings,
            [query],
          ),
        ),
      ) as _i5.QueryBuilder);

  @override
  _i2.ConnectionInterface getConnection() => (super.noSuchMethod(
        Invocation.method(
          #getConnection,
          [],
        ),
        returnValue: _FakeConnectionInterface_0(
          this,
          Invocation.method(
            #getConnection,
            [],
          ),
        ),
      ) as _i2.ConnectionInterface);

  @override
  _i4.Processor getProcessor() => (super.noSuchMethod(
        Invocation.method(
          #getProcessor,
          [],
        ),
        returnValue: _FakeProcessor_2(
          this,
          Invocation.method(
            #getProcessor,
            [],
          ),
        ),
      ) as _i4.Processor);

  @override
  _i3.QueryGrammar getGrammar() => (super.noSuchMethod(
        Invocation.method(
          #getGrammar,
          [],
        ),
        returnValue: _FakeQueryGrammar_1(
          this,
          Invocation.method(
            #getGrammar,
            [],
          ),
        ),
      ) as _i3.QueryGrammar);

  @override
  _i5.QueryBuilder useWritePdo() => (super.noSuchMethod(
        Invocation.method(
          #useWritePdo,
          [],
        ),
        returnValue: _FakeQueryBuilder_3(
          this,
          Invocation.method(
            #useWritePdo,
            [],
          ),
        ),
      ) as _i5.QueryBuilder);
}
